# Databricks notebook source
from typing import List

import ipywidgets
import requests

# COMMAND ----------

def list_scopes() -> List[str]:
  """Lists scopes in Databricks secrets.
  
  Returns:
    A list of scope names.
  """
  return [scope.name for scope in dbutils.secrets.listScopes()]

# COMMAND ----------

def set_secret(scope: str, key: str, value: str) -> None:
  """Put a secret in an existing scope in Databricks secrets.
  
  Note that the scope must exist.
  
  Args:
    scope : Name of the secrets scope.
    key : Name of the secrets key.
    value : The secret to store.
  """
  if scope not in list_scopes():
    raise KeyError(f"Scope '{scope}' does not exist or you do not have permissions to access it.")
    
  workspace_url = spark.conf.get("spark.databricks.workspaceUrl")
  token = dbutils.notebook.entry_point.getDbutils().notebook().getContext().apiToken().get()
  
  response = requests.post(f"https://{workspace_url}/api/2.0/secrets/put",
                               headers={"Authorization": f"Bearer {token}"},
                               json={"scope": scope, "key": key, "string_value": value}
                          )
  
  if not response.ok:
    raise Exception(f"Error code: {response.status_code}. Reason: {response.reason}\nText: {response.text}")

# COMMAND ----------

title_widget = ipywidgets.HTML("<h2>Configure a secret:</h2>")
label_widget = ipywidgets.Label()
scope_widget = ipywidgets.Text(description="Scope")
key_widget = ipywidgets.Text(description="Key")
secret_value_widget = ipywidgets.Password(description='Value', placeholder='Keep it secret!')
button = ipywidgets.Button(description="Configure Secret")

# COMMAND ----------

def process_secret(btn) -> None:
  label_widget.value = ""
  scope = scope_widget.value
  key = key_widget.value
  secret = secret_value_widget.value
  
  if not scope or not key or not secret:
    label_widget.value = "Error: Configure a scope, key and secret first."
    return
  
  try:
    set_secret(scope, key, secret)
  except Exception as e:
    label_widget.value = "Error: " + str(e)
    return
    
  label_widget.value = "Succesfully configured the secret."
  secret_value_widget.value = ""
  
button.on_click(process_secret)

# COMMAND ----------

def render_secrets_menu() -> None:
  """Renders an ipywidgets menu in Databricks."""
  
  display(ipywidgets.VBox([title_widget, scope_widget, key_widget, secret_value_widget, button, label_widget]))
